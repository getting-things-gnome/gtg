#!/usr/bin/env python3
# -----------------------------------------------------------------------------
# Getting Things GNOME! - a personal organizer for the GNOME desktop
# Copyright (c) 2008-2015 - Lionel Dricot & Bertrand Rousseau
#
# This program is free software: you can redistribute it and/or modify it under
# the terms of the GNU General Public License as published by the Free Software
# Foundation, either version 3 of the License, or (at your option) any later
# version.
#
# This program is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
# FOR A PARTICULAR PURPOSE. See the GNU General Public License for more
# details.
#
# You should have received a copy of the GNU General Public License along with
# this program.  If not, see <http://www.gnu.org/licenses/>.
#
#==============================================================================
#
# Getting things GNOME!: a gtd-inspired organizer for GNOME
#
# @author : B. Rousseau, L. Dricot
# @date   : November 2008
#
#   main.py contains the configuration and data structures loader
#   taskbrowser.py contains the main GTK interface for the tasklist
#   task.py contains the implementation of a task and a project
#   taskeditor contains the GTK interface for task editing
#       (it's the window you see when writing a task)
#   backends/xml_backend.py is the way to store tasks and project in XML
#
#   tid stand for "Task ID"
#   pid stand for "Project ID"
#   uid stand for "Universal ID" which is generally the tuple [pid,tid]
#
#   Each id are *strings*
#   tid are the form "X@Y" where Y is the pid.
#   For example : 21@2 is the 21st task of the 2nd project
#   This way, we are sure that a tid is unique accross multiple projects
#
#==============================================================================

"""This is the top-level exec script for running GTG"""

#=== IMPORT ===================================================================
import os
import sys
import logging
import dbus

import gi
gi.require_version('Gdk', '3.0')

from optparse import OptionParser
from gi.repository.Gdk import Screen

from GTG import info
from GTG.backends import BackendFactory
from GTG.core.datastore import DataStore
from GTG.core.dirs import DATA_DIR
from GTG.core.translations import _
from GTG.gtk.dbuswrapper import BUSNAME, BUSINTERFACE
from GTG.gtk.application import Application
from GTG.tools.logger import log


#=== MAIN CLASS ===============================================================

def parse_args():
    """ Parse arguments """
    parser = OptionParser()
    parser.add_option('-b', '--boot-test', action='store_true',
                      dest='boot_test',
                      help="Exit after completing boot-up actions",
                      default=False)
    parser.add_option('-c', '--no-crash-handler', action='store_true',
                      dest='no_crash_handler',
                      help="Disable the automatic crash handler",
                      default=False)
    parser.add_option('-d', '--debug', action='store_true', dest='debug',
                      help="Enable debug output", default=False)
    parser.add_option('-t', '--title', action='store',
                      help="Use special title for windows' title")
    parser.add_option('-v', '--version', action='store_true',
                      dest='print_version', help="Print GTG's version number",
                      default=False)
    return parser.parse_args()


def main():
    """
    Calling this starts the full GTG experience
    """
    options, args = parse_args()
    if options.print_version:
        print("GTG (Getting Things GNOME!)", info.VERSION)
        print()
        print("For more information:", info.URL)
        sys.exit(0)

    if options.title is not None:
        info.NAME = options.title

    ds, req = core_main_init(options, args)
    # Launch task browser
    application = Application(req)
    # main loop
    # To be more user friendly and get the logs of crashes, we show an apport
    # hooked window upon crashes
    if not options.no_crash_handler:
        from GTG.gtk.crashhandler import signal_catcher
        with signal_catcher(application.close_browser):
            application.main(once_thru=options.boot_test, uri_list=args)
    else:
        # manager.main(once_thru=options.boot_test, uri_list=args)
        application.run()


def core_main_init(options=None, args=None):
    """
    Part of the main function prior to the UI initialization.
    """
    # Debugging subsystem initialization
    if options.debug:
        log.setLevel(logging.DEBUG)
        log.debug("Debug output enabled.")
    else:
        log.setLevel(logging.INFO)
    backends_list = BackendFactory().get_saved_backends_list()
    # Load data store
    ds = DataStore()
    # Register backends
    for backend_dic in backends_list:
        ds.register_backend(backend_dic)
    # save the backends directly to be sure projects.xml is written
    ds.save(quit=False)

    # Launch task browser
    req = ds.get_requester()
    return ds, req


#=== EXECUTION ================================================================

if __name__ == "__main__":
    try:
        main()
    except KeyboardInterrupt:
        sys.exit(1)
